========================================================
========================================================
***                                                  ***
***                   FV | PENGO                     ***
***              Gonzalo García Campos               ***
***                                                  ***
========================================================
========================================================


///////////\\\\\\\\\\\\
// PUNTOS REALIZADOS \\
///////////\\\\\\\\\\\\

Requisitos minimos para arobar (todos):
    - Tres niveles implementados.
    - Todas las animaciones añadidas.
    - Funcionalidades:
        - Capacidad de empujar/destruir bloques.
        - Pengo se desplaza por el entorno con las condiciones del juego original.
        - Pengo puede eliminar Sno-Bees adultos mediante bloques.
        - Los Sno-Bees aparecen cuando otros se eleiminan. Usando la fase huevo.
        - Penog dispone de tres vidas.
    - Teclas implementadas:
        - Esc sale del juego.
        - Cursor para desplazar al jugador.
        - Espacio para empujar.
        - G modo dios.
        - X reinicio de nivel.
        - N siguiente nivel.

Notable:
    - Los bloques estrella completamente funcionales (x3 la puntuacion al matar snobees).
    - Margen limite y fuincionalidad de aturdir.
    - Se pueden eliminar los huevos.
    - HUD del juego implementado.

Sobresaliente
    - Nivel 3 generado al azar.
    - Bucle tipo 4 (interpolado).



///////////\\\\\\\\\\\\
//    EXPLICACION    \\
///////////\\\\\\\\\\\\

El juego se inicia en la funcion main() de main.cpp, este metodo llama
a una instancia de la clase Game y lo ejecuta.

Hay una maquina de estados, con dos estados distintos para Game. Play o Intro.
Los estados heredan de la clase IGameState. En la funcion Run() de Game se encuentra el blucle 
pirincipal del juego, que llamara a la funcion update(float) y render() del estado. La clase game dispone
de un objeto Clock que controla el tiempo, ese almacena el tiempo entre fotogramas renderizados, y entre calculos del Mapa
solo hace update(float) en caso de que haya pasado el tiempo suficiente (60fps), pero se renderiza con tiempo interpolado
en cada paso de blucle.

El estado Intro, solo espera a que se pulse la tecla espacio para cambiar a estado Play

El estado Play tiene una instancia de la clase Mapa. Este mapa tiene una matriz donde se almacenan los GameObjects del juego.
El mapa es quien se encarga de borrar, mover, y gestionar los GameObjects. Tambien almacena informacion del estado del juego:
puntuacion, modo dios, si los diamantes estan alineados, y el nivel.
Tabien se encarga de cargar niveles, y de comprobar si se pasa de nivel o se muere.
En caso de que el no queden snobees se pasa de nivel, si se ha superado el ultimo nivel (3), se vuelve al estado Intro en el Game,
en caso d que Pengo muera se vuelve al esado intro en el Game.

GameObjects:
Todos los game objects heredan de la clase GameObject
Cada GameObject almacena sus sprtites o animaciones y las dibuja segun su estado.

    --SnoBee: Tiene estado de andando en cualquier direccion o parado mirando a cualquier direccion y aturdido, cuando choca 
    con un bloque, busca otra direccion en la que andar. El estado aturdido tiene un tiempo limite.
    --Pengo: Tiene tambien estados en todas las direcciones, estatico y en movimiento. Tambien almacena las vidas del jugador.
    --Ice: La clase Ice es la mas compleja, Puede ser un simple hielo, un huevo o un diamante, y tiene estados para las distintas 
    posiciones depndiendo de lo que sea.


Render:
Por ultimo he creado una fachada al motor de render SFML.
La clase render almacena las texturas en un std::Map, cuyo id es el path a la textura. De este modo no se reservara memoria 
para la misma textura dos veces. 
Tambien almacena los sprites en otro std::Map, en este caso genera ids unicos para cada sprite. Y lo mismo hace con las Animaciones. 
Las animaciones son una clase Animacion, que tiene un vector de ids de Sprites.
Todas las fuciones necesarias para crear, borrar, mover, y dibujar tanto sprites como animacones estan incluidas en la clase Render. 
Esta clase es tambien sngleton.



